name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: Testes (Lint, Unitários e Integração)
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Criar .env de teste
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "JWT_SECRET=test-secret-key-for-github-actions" >> .env.test
          echo "MONGODB_URI=mongodb://localhost:27017/test-db" >> .env.test
          echo "MONGO_URI=mongodb://localhost:27017/test-db" >> .env.test
      - name: Lint (opcional)
        run: npm run lint || echo "Lint não configurado"
      - name: Testes unitários
        run: npm test -- --coverage --testPathPattern="unit" --passWithNoTests
      - name: Esperar MongoDB
        run: |
          timeout 60 bash -c 'until mongosh --eval "db.runCommand(\"ping\").ok"; do sleep 2; done'
      - name: Testes de integração
        run: npm test -- --testPathPattern="integration" --passWithNoTests

  build-deploy:
    name: Build e Deploy para Vercel
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci --only=production
      - name: Criar .env.production.template
        run: |
          echo "# Production Environment Variables" > .env.production.template
          echo "NODE_ENV=production" >> .env.production.template
          echo "PORT=5000" >> .env.production.template
          echo "JWT_SECRET=your-jwt-secret-here" >> .env.production.template
          echo "MONGO_URI=your-mongodb-connection-string" >> .env.production.template
      - name: Build (simples)
        run: |
          mkdir -p dist
          cp -r src dist/
          cp package*.json dist/
          cp .env.production.template dist/
          cp README.md dist/ || echo "README.md not found"
          cp vercel.json dist/ || echo "vercel.json not found"
      - name: Deploy para Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod' 